#!/bin/sh

topdir=$(cd ${0%/*}/.. && pwd)
. $topdir/lib/cross-compile.sh

JOBS=$(lscpu | awk '/^CPU\(s\):/ { print $2 }')
KBUILD_OUTPUT=build
SELF=$0
ARGS=$@
CMD=build
KBUILD_CHECKSRC=0
KBUILD_ENABLE_EXTRA_GCC_CHECKS=
MAKE_ARGS=
NFSBOOT=no
pwd=`pwd`

while test $# -gt 0; do
	if test -n "$prev"; then
		eval "$prev=$1"
		shift; prev=
		continue
	fi

	case $1 in
		-c | --check)
			KBUILD_CHECKSRC=1
			shift
			;;

		-o | --output)
			prev=KBUILD_OUTPUT
			shift
			;;

		-s | --soc)
			prev=SOC
			shift
			;;

		-j | --jobs)
			prev=JOBS
			shift
			;;

		-p | --pedantic)
			KBUILD_ENABLE_EXTRA_GCC_CHECKS=2
			shift
			;;

		-v | --verbose)
			KBUILD_VERBOSE=1
			shift
			;;

		-w | --warnings)
			KBUILD_ENABLE_EXTRA_GCC_CHECKS=1
			shift
			;;

		-N | --nfs)
			NFSBOOT=yes
			shift
			;;

		*)
			CMD=$1
			shift
			break
			;;
	esac
done

if test -z "$SOC"; then
	ALL_SOCS="tegra20 tegra30 tegra114 tegra124 tegra132 tegra210 tegra186 tegra194 tegra234"
	rc=0

	for SOC in $ALL_SOCS; do
		$SELF --soc $SOC $ARGS || exit $?
	done

	exit 0
fi

case $SOC in
	tegra20 | tegra30 | tegra114 | tegra124)
		ARCH=arm
		;;

	tegra132 | tegra210 | tegra186 | tegra194 | tegra234)
		ARCH=arm64
		;;

	*)
		echo "unsupported SoC: $SOC"
		exit 1
		;;
esac

#
# We need to override pkg-config's libdir here to make it point at the build
# system. This ensures that the kernel build system can pick up the right .pc
# files even if the PATH contains a cross-compilation pkg-config script.
#
PKG_CONFIG_LIBDIR=/usr/lib/pkgconfig

KBUILD_OUTPUT=${KBUILD_OUTPUT}/$SOC

export PKG_CONFIG_LIBDIR
export KBUILD_ENABLE_EXTRA_GCC_CHECKS
export KBUILD_CHECKSRC
export KBUILD_VERBOSE
export KBUILD_OUTPUT
export ARCH

case $ARCH in
	arm)
		DEFCONFIG=tegra_defconfig
		IMAGE=zImage
		DTS=dts
		;;

	arm64)
		DEFCONFIG=defconfig
		IMAGE=Image
		DTS=dts/nvidia
		;;

	*)
		echo "unsupported architecture: $ARCH"
		exit 1
		;;
esac

function configure()
{
	nice make -j $JOBS ${1-$DEFCONFIG}
}

function defconfig()
{
	nice make -j $JOBS $DEFCONFIG
}

function oldconfig()
{
	nice make -j $JOBS oldconfig
}

function menuconfig()
{
	nice make -j $JOBS menuconfig
}

function savedefconfig()
{
	nice make -j $JOBS savedefconfig
}

function olddefconfig()
{
	nice make -j $JOBS olddefconfig
}

function version()
{
	nice make -j $JOBS -s kernelrelease
}

function build()
{
	local ARGS
	local MODULE
	check=no

	while test $# -gt 0; do
		if test -n "$prev"; then
			eval "$prev=$1"
			shift; prev=
			continue
		fi

		case $1 in
			-c | --check)
				check=yes
				shift
				;;

			-k | --keep-going)
				ARGS="--keep-going"
				shift
				;;

			-m | --module)
				prev=MODULE
				shift
				;;

			*)
				break
				;;
		esac
	done

	if test "x$check" = "xyes"; then
		ARGS="$ARGS C=1"
	fi

	if test "x$MODULE" != "x"; then
		MODULE="M=$MODULE"
	fi

	nice make -j $JOBS $ARGS oldconfig || return $?
	nice make -j $JOBS $ARGS $MODULE 2>&1 | tee "$KBUILD_OUTPUT/build.log"

	rc=${PIPESTATUS[0]}

	if test "x$rc" = "x0"; then
		status="Completed"
	else
		status="Failed"
	fi

	notify-send "tegra-kernel" "$status kernel build for $SOC"

	return $rc
}

function dtbs()
{
	while test $# -gt 0; do
		if test -n "$prev"; then
			eval "$prev=$1"
			shift; prev=
			continue
		fi

		case $1 in
			*)
				break
				;;
		esac
	done

	nice make -j $JOBS oldconfig || return $?
	nice make -j $JOBS dtbs 2>&1 | tee "$KBUILD_OUTPUT/build.log"

	rc=${PIPESTATUS[0]}

	if test "x$rc" = "x0"; then
		status="Completed"
	else
		status="Failed"
	fi

	notify-send "tegra-kernel" "$status DTBs built for $SOC"

	return $rc
}

function check()
{
	local ARGS

	while test $# -gt 0; do
		case $1 in
			*)
				break
				;;
		esac
	done

	ARGS="$ARGS dt_binding_check"
	ARGS="$ARGS dtbs_check"

	echo "ARGS: $ARGS"
	nice make -j $JOBS $ARGS 2>&1 | tee "$KBUILD_OUTPUT/check.log"

	rc=${PIPESTATUS[0]}
	return $rc
}

function clean()
{
	nice make -j $JOBS clean
}

function install()
{
	local MODULE

	while test $# -gt 0; do
		if test -n "$prev"; then
			eval "$prev=$1"
			shift; prev=
			continue
		fi

		case $1 in
			-m | --module)
				prev=MODULE
				shift
				;;

			*)
				break
				;;
		esac
	done

	if test -z "$SOC"; then
		echo "SoC not specified"
		exit 1
	fi

	mkdir -p "/srv/nfs/$SOC/boot"

	cp $KBUILD_OUTPUT/arch/$ARCH/boot/$IMAGE /srv/nfs/$SOC/boot
	cp $KBUILD_OUTPUT/arch/$ARCH/boot/$DTS/$SOC-*.dtb /srv/nfs/$SOC/boot

	if test "x$MODULE" != "x"; then
		MODULE="M=$MODULE"
	fi

	nice make -j $JOBS $MODULE INSTALL_MOD_PATH=/srv/nfs/$SOC modules_install

	case $SOC in
		# Cardhu support exists for two different revisions, so create
		# a symlink to the correct one.
		tegra30)
			ln -sf tegra30-cardhu-a04.dtb /srv/nfs/$SOC/boot/tegra30-cardhu.dtb
			;;

		# Tegra210 doesn't support network booting yet, so it must be
		# copied onto MMC/SD as well. This assumes that U-Boot UMS is
		# used and creates a local device named /dev/sde whose first
		# partition is the root partition.
		tegra210)
#			mount /dev/sdc1 /mnt &&
#				cp $KBUILD_OUTPUT/arch/$ARCH/boot/$DTS/$SOC-*.dtb /mnt/$SOC/boot &&
#				cp $KBUILD_OUTPUT/arch/$ARCH/boot/$IMAGE /mnt/$SOC/boot &&
#				umount /mnt
#			# for L4T
#			UMS=/dev/disk/by-path/pci-0000:00:1d.0-usb-0:1.5:1.0-scsi-0:0:0:0
#			if test -b $UMS; then
#				UMS=/dev/$(udevadm info --query name $UMS)
#				mount ${UMS}1 /mnt &&
#					nice make -j $JOBS INSTALL_MOD_PATH=/mnt modules_install &&
#					cp $KBUILD_OUTPUT/arch/$ARCH/boot/$DTS/$SOC-*.dtb /mnt/boot/dtb &&
#					cp $KBUILD_OUTPUT/arch/$ARCH/boot/$IMAGE /mnt/boot &&
#					umount /mnt
#			fi
			;;
	esac
}

function flash()
{
	if test -z "$SOC"; then
		echo "SoC not specified"
		exit 1
	fi

	case $SOC in
		tegra186)
			pm342-recovery
			KBUILD_OUTPUT=$(cd $KBUILD_OUTPUT; pwd)
			L4T_ROOT=/home/thierry.reding/src/l4t/stage-main/out/l4t-t186ref-debug-aarch64/full_linux_for_tegra/Linux_for_Tegra
			oldpwd=$(pwd)
			cd $L4T_ROOT
			./flash.sh -k kernel \
				-K $KBUILD_OUTPUT/arch/arm64/boot/Image \
				-I /home/thierry.reding/src/pbs-ng.git/build/tegra186/initrd.gz \
				-d $KBUILD_OUTPUT/arch/arm64/boot/dts/nvidia/tegra186-p2771-0000.dtb \
				-N 192.168.69.100:/srv/nfs/tegra186 p2771-0000 eth0
#				p2771-0000 mmcblk0p1
			cd $oldpwd
			;;

		tegra194)
			extra_args=""

			if test "x$NFSBOOT" = "xyes"; then
				extra_args="$extra_args -N 192.168.23.1:/srv/nfs/tegra194"
				extra_args="$extra_args -I /home/thierry.reding/src/pbs-ng.git/build/tegra194/initrd.gz"
				boot_device=eth0
			else
				boot_device=mmcblk0p1
			fi

			KBUILD_OUTPUT=$(cd $KBUILD_OUTPUT; pwd)
			L4T_ROOT=$HOME/src/l4t/stage-main/out/l4t-t186ref-debug-aarch64/full_linux_for_tegra/Linux_for_Tegra

			if test -f "$L4T_ROOT/system.img"; then
				extra_args="$extra_args -r"
			fi

			oldpwd=$(pwd)
			cd $L4T_ROOT
			pm342-recovery
			./flash.sh -r -k kernel-dtb \
				-K $KBUILD_OUTPUT/arch/arm64/boot/Image \
				-d $KBUILD_OUTPUT/arch/arm64/boot/dts/nvidia/tegra194-p2972-0000.dtb \
				-C 'ignore_loglevel earlyprintk drm.debug=0x1f' \
				$extra_args \
				jetson-xavier $boot_device
			pm342-recovery
			./flash.sh -r -k kernel \
				-K $KBUILD_OUTPUT/arch/arm64/boot/Image \
				-d $KBUILD_OUTPUT/arch/arm64/boot/dts/nvidia/tegra194-p2972-0000.dtb \
				-C 'ignore_loglevel earlyprintk drm.debug=0x1f' \
				$extra_args \
				jetson-xavier $boot_device
			cd $oldpwd
			;;

		*)
			echo "flashing not supported for $SOC"
			;;
	esac
}

function nvgpu()
{
	local ARGS

	if test -z "$SOC"; then
		echo "SoC not specified"
		exit 1
	fi

	NVGPU="/home/thierry.reding/src/l4t/nvgpu.git"
	ARGS="$ARGS M=$NVGPU/drivers/gpu/nvgpu"
	ARGS="$ARGS srctree.nvgpu=$NVGPU"

	if test "x$1" = "xbuild" -o "x$1" = "x"; then
		nice make -j $JOBS $ARGS modules
	fi

	if test "x$1" = "xinstall"; then
		ARGS="$ARGS INSTALL_MOD_PATH=/srv/nfs/$SOC/usr"
		nice make -j $JOBS $ARGS modules_install
	fi
}

if test "$(type -t $CMD 2> /dev/null)" = 'function'; then
	cross_compile_prepare $ARCH
	$CMD "$@"; rc=$?
	cross_compile_cleanup
else
	echo "$CMD: no such command"
	rc=1
fi

exit $rc

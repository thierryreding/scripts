#!/bin/sh

topdir=$(cd ${0%/*}/.. && pwd)
. $topdir/lib/cross-compile.sh

incremental=no

usage()
{
	echo "usage: $1 [options]"
}

while test $# -ne 0; do
	if test -n "$prev"; then
		eval "$prev=$1"
		shift; prev=
		continue
	fi

	case $1 in
		--output)
			prev=builddir
			shift
			;;

		--incremental)
			incremental=yes
			shift
			;;

		*)
			usage $0
			exit 1
			;;
	esac
done

if test -z "$builddir"; then
	builddir=build/$(git describe)
fi

while read arch config; do
	if test "${arch###}" != "${arch}"; then
		continue
	fi

	cross_compile_prepare $arch

	KBUILD_OUTPUT="${builddir}/${arch}/${config}"

	if test "x$incremental" = "xno"; then
		if test -d "$KBUILD_OUTPUT"; then
			rm -rf "$KBUILD_OUTPUT"
		fi

		mkdir -p "$KBUILD_OUTPUT"
	fi

	JOBS=13

	echo -en "building \033[1;35m$arch\033[0m using \033[1;34m$config\033[0m..."
	export KBUILD_OUTPUT

	(
		# redirect stdout to stderr and stderr to stdout so that tee
		# can write stderr to error.log (tee reads only stdout via
		# the pipe)
		(
			if test "x$incremental" = "xno"; then
				make -j $JOBS clean
				make -j $JOBS $config
			fi

			make -j $JOBS -k
		) 3>&1 1>&2 2>&3 | tee "$KBUILD_OUTPUT/error.log"
		# need $PIPESTATUS here because $? contains the exit code from tee
		exit $PIPESTATUS
	) &> "$KBUILD_OUTPUT/build.log"
	rc=$?

	if test "x$rc" != "x0"; then
		echo -e "\033[1;31mfailed ($rc)\033[0m"
	else
		if test -s "$KBUILD_OUTPUT/error.log"; then
			echo -e "\033[1;33mdone\033[0m"
		else
			echo -e "\033[1;32mdone\033[0m"
		fi
	fi
done
